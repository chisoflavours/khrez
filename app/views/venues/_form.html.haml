= simple_form_for @venue, html: { multipart: true } do |f|

  #venueForm
    .tab
      .field
        %h3.colour2 Name
        %br/
        %p
          = f.input :name, input_html: { class: 'in' }, label: false, placeholder: "Name"
          %hr.hr_login
        %br/
        %br/
      .field
        %h3.colour2 Description
        %br/
        %p
        = f.input :description, required: true, input_html: { class: 'in' }, label: false, placeholder: "Description"
        %hr.hr_login
    .tab
      .field
        %h3.colour2 Postcode
        %br
        %p
          = f.input :postcode, required: true, input_html: { class: 'in' }, label: false, placeholder: "Postcode"
          %hr.hr_login
        %br/
      .field
        %h3.colour2 County
        %br
        %p
          = f.input :county, required: true, input_html: { class: 'in' }, label: false, placeholder: "County"
          %hr.hr_login
        %br/
      .field
        %h3.colour2 Street Line 1
        %br
        %p
          = f.input :street_line_one, required: true, input_html: { class: 'in' }, label: false, placeholder: "Street Line 1"
          %hr.hr_login
        %br/
      .field
        %h3.colour2 Street Line 2
        %br/
        %p
          = f.input :street_line_two, required: true, input_html: { class: 'in' }, label: false, placeholder: "Street Line 2"
          %hr.hr_login
        %br/
      .field
        %h3.colour2 City
        %br/
        %p
          = f.input :city, required: true, input_html: { class: 'in' }, label: false, placeholder: "City"
          %hr.hr_login
    .tab
      .field
        %h3.colour2 Capacity Standing
        %br/
        %p
          = f.input :capacity_standing, required: true, input_html: { class: 'in' }, label: false, placeholder: "Capacity Standing"
          %hr.hr_login
        %br/
      .field
        %h3.colour2 Capacity Sitting
        %br/
        %p
          = f.input :capacity_sitting, required: true, input_html: { class: 'in' }, label: false, placeholder: "Capacity Sitting"
          %hr.hr_login
        %br/
      .field
        %h3.colour2 Venue Size
        %br/
        %p
          = f.input :size, required: true, input_html: { class: 'in' }, label: false, placeholder: "Size sqm"
          %hr.hr_login
    .tab
      .field
        %h3.colour2 Parking Spaces
        %br/
        %p
          = f.input :parking_spaces, required: true, input_html: { class: 'in' }, label: false, placeholder: "Number Of Parking Spaces"
          %hr.hr_login
        %br/
      .field
        %h3.colour2 Kitchens
        %br/
        %p
          = f.input :kitchens, required: true , input_html: { class: 'in' }, label: false, placeholder: "Number Of Kitchens"
          %hr.hr_login
        %br/
      .field
        %h3.colour2 Toilets
        %br/
        %p
          = f.input :toilets, required: true , input_html: { class: 'in' }, label: false, placeholder: "Number Of Toilets"
          %hr.hr_login
        %br/
      .field
        %h3.colour2 Tables
        %br/
        %p
          = f.input :tables, required: true , input_html: { class: 'in' }, label: false, placeholder: "Number Of Tables"
          %hr.hr_login
        %br/
      .field
        %h3.colour2 Chairs
        %br/
        %p
          = f.input :chairs, required: true , input_html: { class: 'in' }, label: false, placeholder: "Number Of Chairs"
          %hr.hr_login
        %br/
      .field
        %h3.colour2 Extra Infomation
        %br/
        %p
          = f.input :extra_info, input_html: { class: 'in' }, label: false, placeholder: "Extra Infomation"
          %hr.hr_login
    .tab
      .field
        %h3.colour2 External Catering
        %br/
        %p
          = f.input :external_catering_allowed, label: false, input_html: { class: 'ib' }
        %br/
      .field
        %h3.colour2 External Alcohol
        %br/
        %p
          = f.input :external_alcahool_allowed, label: false, input_html: { class: 'ib' }
        %br/
      .field
        %h3.colour2 Catering Provided
        %br/
        %p
          = f.input :inhouse_catering_provided, label: false, input_html: { class: 'ib'} 
        %br/
      .field
        %h3.colour2 Alcohol Provided
        %br/
        %p
          = f.input :inhouse_alcahool_provided, label: false, input_html: { class: 'ib' } 
        %br/
      .field
        %h3.colour2 Storage
        %br/
        %p
          = f.input :storage, label: false, input_html: { class: 'ib' }
        %br/
      .field
        %h3.colour2 Air Conditioning
        %br/
        %p
          = f.input :air_conditionind, label: false, input_html: { class: 'ib' }
        %br/
      .field
        %h3.colour2 Wifi
        %br/
        %p
          = f.input :wifi, label: false, input_html: { class: 'ib' }
        %br/
      .field
        %h3.colour2 Projector
        %br/
        %p
          = f.input :projector, label: false, input_html: { class: 'ib' } 
        %br/
      .field
        %h3.colour2 Disabled Acess
        %br/
        %p
          = f.input :disabled_acess , input_html: { class: 'ib' }, label: false
        %br/
      .field
        %h3.colour2 Outside Spaces
        %br/
        %p
          = f.input :outside_spaces , input_html: { class: 'ib' }, label: false
        %br/
    .tab
      .field
        %h3.colour2 Category
        %br/
        %p
          = f.input :category, required: true, input_html: { class: 'ins' }, prompt: "Category", label: false, collection: [ "Hall", "Bar", "Meeting Room", "Reception", "Kids Party", "Party", "Exhibition", "Performance Venue", "Wedding Venue", "Private Room", "Conference Room", "Other"]
        %br/
      .avatarbtn
        .field
          %h3.colour2 Venue Image
          %br/
          %p
          .button
            = f.input :thumbnail, as: :file, input_html: { hidden: true,class: 'button',id:'venimgbtn' }, label: 'Upload Venue Image'
      .field
        %p
          %br/
          %br/
          = f.button :submit, :class => 'button' 
 
  
    %div{:style => "overflow:auto;"}
      %br/
      %br/
      .field
        %button#prevBtn{:onclick => "nextPrev(-1)", :type => "button"} Previous
        %button#nextBtn{:onclick => "nextPrev(1)", :type => "button"} Next

    / Circles which indicates the steps of the form:
    %div{:style => "text-align:center;margin-top:60px;"}
      %span.step
      %span.step
      %span.step
      %span.step
      %span.step
      %span.step

%br/
%br/
%br/
%br/


:javascript


  var currentTab = 0; // Current tab is set to be the first tab (0)
  showTab(currentTab); // Display the crurrent tab

  function showTab(n) {
    // This function will display the specified tab of the form...
    var x = document.getElementsByClassName("tab");
    x[n].style.display = "block";
    //... and fix the Previous/Next buttons:
    if (n == 0) {
      document.getElementById("prevBtn").style.display = "none";
    } else {
      document.getElementById("prevBtn").style.display = "inline";
    }
    if (n == (x.length - 1)) {
      document.getElementById("nextBtn").style.display = "none";
      document.getElementById("prevBtn").style.display = "none";
    } else {
      document.getElementById("nextBtn").innerHTML = "Next";
    }
    //... and run a function that will display the correct step indicator:
    fixStepIndicator(n)
  }

  function nextPrev(n) {
    // This function will figure out which tab to display
    var x = document.getElementsByClassName("tab");
    // Exit the function if any field in the current tab is invalid:
    // Hide the current tab:
    x[currentTab].style.display = "none";
    // Increase or decrease the current tab by 1:
    currentTab = currentTab + n;
    // if you have reached the end of the form...
    if (currentTab >= x.length) {
      // ... the form gets submitted:
      document.getElementById("regForm").submit();
      return false;
    }
    // Otherwise, display the correct tab:
    showTab(currentTab);
  }

  function validateForm() {
    // This function deals with validation of the form fields
    var x, y, i, valid = true;
    x = document.getElementsByClassName("tab");
    y = x[currentTab].getElementsByTagName("input");
    // A loop that checks every input field in the current tab:
    for (i = 0; i < y.length; i++) {
      // If a field is empty...
      if (y[i].value == "") {
        // add an "invalid" class to the field:
        y[i].className += " invalid";
        // and set the current valid status to false
        valid = false;
      }
    }
    // If the valid status is true, mark the step as finished and valid:
    if (valid) {
      document.getElementsByClassName("step")[currentTab].className += " finish";
    }
    return valid; // return the valid status
  }

  function fixStepIndicator(n) {
    // This function removes the "active" class of all steps...
    var i, x = document.getElementsByClassName("step");
    for (i = 0; i < x.length; i++) {
      x[i].className = x[i].className.replace(" active", "");
    }
    //... and adds the "active" class on the current step:
    x[n].className += " active";
  }