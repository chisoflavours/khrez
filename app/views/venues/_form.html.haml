= simple_form_for @venue, html: { multipart: true } do |f|

  #venueForm
    .tab
      .field
        %h3.colour Venue Name
        %br/
        %p
          = f.input :name, input_html: { class: 'in' }, label: false, placeholder: "Name"
        %br/
        %br/
      .field
        %h3.colour Description
        %br/
        %p
        = f.input :description, input_html: { class: 'in2' }, label: false, placeholder: "Description", maxlength: 600
    .tab
      .field
        %h3.colour Postcode
        %br
        %p
          = f.input :postcode, input_html: { class: 'in' }, label: false, placeholder: "Postcode"
        %br/
        %br/
      .field
        %h3.colour County
        %br/
        %p
          = f.input :county, input_html: { class: 'in' }, label: false, placeholder: "County"
        %br/
        %br/
      .field
        %h3.colour Street Line 1
        %br/
        %p
          = f.input :street_line_one, input_html: { class: 'in' }, label: false, placeholder: "Street Line 1"
        %br/
        %br/
      .field
        %h3.colour Street Line 2
        %br/
        %p
          = f.input :street_line_two, input_html: { class: 'in' }, label: false, placeholder: "Street Line 2"
        %br/
        %br/
      .field
        %h3.colour City
        %br/
        %p
          = f.input :city, input_html: { class: 'in' }, label: false, placeholder: "City"
        
    .tab
      .field
        %h3.colour Capacity Standing
        %br/
        %p
          = f.input :capacity_standing, input_html: { class: 'in' }, label: false, placeholder: "Capacity Standing"
        %br/
        %br/
      .field
        %h3.colour Capacity Sitting
        %br/
        %p
          = f.input :capacity_sitting, input_html: { class: 'in' }, label: false, placeholder: "Capacity Sitting"
        %br/
        %br/
      .field
        %h3.colour Venue Size
        %br/
        %p
          = f.input :size, input_html: { class: 'in' }, label: false, placeholder: "Size sqm"
      
    .tab
      .field
        %h3.colour Parking Spaces
        %br/
        %p
          = f.input :parking_spaces, input_html: { class: 'in' }, label: false, placeholder: "Number Of Parking Spaces"
        %br/
        %br/
      .field
        %h3.colour Kitchens
        %br/
        %p
          = f.input :kitchens, input_html: { class: 'in' }, label: false, placeholder: "Number Of Kitchens"
        %br/
        %br/
      .field
        %h3.colour Toilets
        %br/
        %p
          = f.input :toilets, input_html: { class: 'in' }, label: false, placeholder: "Number Of Toilets"
        %br/
        %br/
      .field
        %h3.colour Tables
        %br/
        %p
          = f.input :tables, input_html: { class: 'in' }, label: false, placeholder: "Number Of Tables"
        %br/
        %br/
      .field
        %h3.colour Chairs
        %br/
        %p
          = f.input :chairs, input_html: { class: 'in' }, label: false, placeholder: "Number Of Chairs"
        %br/
        %br/
      .field
        %h3.colour Extra Infomation
        %br/
        %p
          = f.input :extra_info, input_html: { class: 'in2' }, label: false, placeholder: "Extra Infomation", maxlength: 200
       
    .tab
      .field
        %h3.colour External Catering
        %br/
        %p
          = f.input :external_catering_allowed, label: false, input_html: { class: 'ib' }
        %br/
      .field
        %h3.colour External Alcohol
        %br/
        %p
          = f.input :external_alcahool_allowed, label: false, input_html: { class: 'ib' }
        %br/
      .field
        %h3.colour Catering Provided
        %br/
        %p
          = f.input :inhouse_catering_provided, label: false, input_html: { class: 'ib'} 
        %br/
      .field
        %h3.colour Alcohol Provided
        %br/
        %p
          = f.input :inhouse_alcahool_provided, label: false, input_html: { class: 'ib' } 
        %br/
      .field
        %h3.colour Storage
        %br/
        %p
          = f.input :storage, label: false, input_html: { class: 'ib' }
        %br/
      .field
        %h3.colour Air Conditioning
        %br/
        %p
          = f.input :air_conditionind, label: false, input_html: { class: 'ib' }
        %br/
      .field
        %h3.colour Wifi
        %br/
        %p
          = f.input :wifi, label: false, input_html: { class: 'ib' }
        %br/
      .field
        %h3.colour Projector
        %br/
        %p
          = f.input :projector, label: false, input_html: { class: 'ib' } 
        %br/
      .field
        %h3.colour Disabled Acess
        %br/
        %p
          = f.input :disabled_acess , input_html: { class: 'ib' }, label: false
        %br/
      .field
        %h3.colour Outside Spaces
        %br/
        %p
          = f.input :outside_spaces , input_html: { class: 'ib' }, label: false
        %br/
    .tab
      .field
        %h3.colour Category
        %br/
        %p
          = f.input :category, input_html: { class: 'in' }, prompt: " Venue Category", label: false, collection: [ "Hall", "Bar", "Meeting Room", "Reception", "Kids Party", "Party", "Exhibition", "Performance Venue", "Wedding Venue", "Private Room", "Conference Room", "Other"]
        %br/
        %br/
      .avatarbtn
        .field
          %h3.colour Venue Image
          %br/
          %p
          .button
            = f.input :thumbnail, as: :file, input_html: { hidden: true,id:'venimgbtn' }, label: 'Upload'
      .field
        %br/
        %br/
        %br/
        %br/
        %p
          %br/
          %br/
          = f.button :button,"Next", data: {disable_with: "<i class='fa fa-spinner fa-spin'></i>"}
 
  
    %div{:style => "overflow:auto;"}
      %br/
      %br/
      .field
        %button#prevBtn{:onclick => "nextPrev(-1)", :type => "button"} Previous
        %button#nextBtn{:onclick => "nextPrev(1)", :type => "button"} Next



:javascript


  var currentTab = 0; // Current tab is set to be the first tab (0)
  showTab(currentTab); // Display the crurrent tab

  function showTab(n) {
    // This function will display the specified tab of the form...
    var x = document.getElementsByClassName("tab");
    x[n].style.display = "block";
    //... and fix the Previous/Next buttons:
    if (n == 0) {
      document.getElementById("prevBtn").style.display = "none";
    } else {
      document.getElementById("prevBtn").style.display = "inline";
    }
    if (n == (x.length - 1)) {
      document.getElementById("nextBtn").style.display = "none";
      document.getElementById("prevBtn").style.display = "none";
    } else {
      document.getElementById("nextBtn").innerHTML = "Next";
    }
    //... and run a function that will display the correct step indicator:
    fixStepIndicator(n)
  }

  function nextPrev(n) {
    // This function will figure out which tab to display
    var x = document.getElementsByClassName("tab");
    // Exit the function if any field in the current tab is invalid:
    // Hide the current tab:
    x[currentTab].style.display = "none";
    // Increase or decrease the current tab by 1:
    currentTab = currentTab + n;
    // if you have reached the end of the form...
    if (currentTab >= x.length) {
      // ... the form gets submitted:
      document.getElementById("regForm").submit();
      return false;
    }
    // Otherwise, display the correct tab:
    showTab(currentTab);
  }

  function validateForm() {
    // This function deals with validation of the form fields
    var x, y, i, valid = true;
    x = document.getElementsByClassName("tab");
    y = x[currentTab].getElementsByTagName("input");
    // A loop that checks every input field in the current tab:
    for (i = 0; i < y.length; i++) {
      // If a field is empty...
      if (y[i].value == "") {
        // add an "invalid" class to the field:
        y[i].className += " invalid";
        // and set the current valid status to false
        valid = false;
      }
    }
    // If the valid status is true, mark the step as finished and valid:
    if (valid) {
      document.getElementsByClassName("step")[currentTab].className += " finish";
    }
    return valid; // return the valid status
  }

  function fixStepIndicator(n) {
    // This function removes the "active" class of all steps...
    var i, x = document.getElementsByClassName("step");
    for (i = 0; i < x.length; i++) {
      x[i].className = x[i].className.replace(" active", "");
    }
    //... and adds the "active" class on the current step:
    x[n].className += " active";
  }